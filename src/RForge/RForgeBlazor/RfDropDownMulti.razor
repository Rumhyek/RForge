@using RForge.Abstractions.DropDowns
@using RForgeBlazor.Services
@typeparam TItem

@inherits RfDropDownBase<TItem>

<div class="dropdown @DropdownCss">
    <div class="dropdown-trigger">
        <button class="button" type="button" aria-haspopup="true" aria-controls="@DropdownId" @onclick="@OnDropDownClick">
            @if (SelectedItems == null || SelectedItems.Count == 0)
            {
                <span class="place-holder">@PlaceholderText</span>
            }
            else
            {
                <span class="field is-grouped is-grouped-multiline mb-0">

                    @foreach (var selectedItem in SelectedItems)
                    {
                        <span class="control">
                            <span class="tags has-addons">
                                <span class="tag @CssSelectedClass">

                                    @if (SelectedItemTemplate != null)
                                    {
                                        @SelectedItemTemplate(selectedItem)
                                    }
                                    else
                                    {
                                        @ChildContent(selectedItem)
                                    }
                                </span>
                                @if (IsReadonly == false)
                                {
                                    <a class="tag is-delete"
                                       tabindex="0"
                                       @onclick="@(async () => await OnDeselectClick(selectedItem))"
                                       @onclick:preventDefault="true"
                                       @onclick:stopPropagation="true"></a>
                                }
                            </span>
                        </span>
                    }
                </span>
            }
            <span class="rf-icon icon is-small @IsLoadingCss">
                <i class="fa-solid fa-angle-down" aria-hidden="true"></i>
                <span class="loader"></span>
            </span>
        </button>
    </div>
    <div class="dropdown-menu" id="@DropdownId" role="menu">
        <div class="dropdown-content @CssHelper.AddIf(ShowFilter,"has-filter")">

            @if (ShowFilter == true)
            {
                bool hasFilterIcon = string.IsNullOrWhiteSpace(FilterIcon) == false && IsLoading == false;
                <div class="dropdown-item is-filter">
                    <div class="field">
                        <div class="control @CssHelper.AddIf(hasFilterIcon || IsLoading, "has-icons-right") @IsLoadingCss">
                            <input type="search" class="input" placeholder="@FilterPlaceholderText" @bind-value=Filter @oninput=@OnFilterChange />

                            @if (hasFilterIcon == true)
                            {
                                <span class="icon is-small is-right">
                                    <i class="@FilterIcon"></i>
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }


            @if (SelectedItems != null && ShowSelectedItemInDropDown != RfShowSelectionInDropDown.Never)
            {
                @foreach (var selectedItem in SelectedItems)
                {
                    bool showAtTop = false;
                    if (SelectedItems != null && SelectedItems.Count > 0)
                    {
                        switch (ShowSelectedItemInDropDown)
                        {
                            case RfShowSelectionInDropDown.Always:
                                showAtTop = true;
                                break;
                            case RfShowSelectionInDropDown.OnlyWhenNotInList:
                                showAtTop = Items == null || Items.Any(i => ItemComparer(i, selectedItem)) == false;
                                break;
                        }
                    }
                    if (showAtTop == true)
                    {
                        <a class="dropdown-item @CssRowItemClass is-selected"
                           @onclick=@(async () => await OnItemClick(selectedItem))
                           @onkeydown=@(async (e) => await OnItemKeyDown(e, selectedItem))
                           tabindex="0">

                            @if (RowItemTemplate != null)
                            {
                                @RowItemTemplate(selectedItem)
                            }
                            else
                            {
                                @ChildContent(selectedItem)
                            }
                        </a>
                    }
                }
            }

            @if (Items == null || Items.Count == 0)
            {
                <div class="dropdown-item">
                    @if (EmptyContentTemplate != null)
                    {
                        @EmptyContentTemplate(EmptyContentText)
                    }
                    else
                    {
                        @EmptyContentText
                    }
                </div>
            }
            else
            {
                @foreach (var item in Items)
                {
                    string rowCss = null;
                    CssHelper.AddIfTrue(ref rowCss, IsSelected(item), "is-selected");

                    <a class="dropdown-item @CssRowItemClass @rowCss"
                       @onclick=@(async () => await OnItemClick(item))
                       @onkeydown=@(async (e) => await OnItemKeyDown(e, item))
                       tabindex="0">

                        @if (RowItemTemplate != null)
                        {
                            @RowItemTemplate(item)
                        }
                        else
                        {
                            @ChildContent(item)
                        }
                    </a>
                }
            }
        </div>
    </div>
</div>
